/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalEsper2MaudeParser;
import org.xtext.example.mydsl.services.Esper2MaudeGrammarAccess;

public class Esper2MaudeParser extends AbstractContentAssistParser {

	@Inject
	private Esper2MaudeGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEsper2MaudeParser createParser() {
		InternalEsper2MaudeParser result = new InternalEsper2MaudeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSelectEntryAccess().getAlternatives(), "rule__SelectEntry__Alternatives");
					put(grammarAccess.getFieldAccess().getAlternatives(), "rule__Field__Alternatives");
					put(grammarAccess.getGroupOpAccess().getAlternatives(), "rule__GroupOp__Alternatives");
					put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
					put(grammarAccess.getNonLastSelectEntryAccess().getGroup(), "rule__NonLastSelectEntry__Group__0");
					put(grammarAccess.getSelectEntryAccess().getGroup_0(), "rule__SelectEntry__Group_0__0");
					put(grammarAccess.getSelectEntryAccess().getGroup_0_1(), "rule__SelectEntry__Group_0_1__0");
					put(grammarAccess.getSelectEntryAccess().getGroup_1(), "rule__SelectEntry__Group_1__0");
					put(grammarAccess.getSelectEntryAccess().getGroup_1_4(), "rule__SelectEntry__Group_1_4__0");
					put(grammarAccess.getFieldAccess().getGroup_1(), "rule__Field__Group_1__0");
					put(grammarAccess.getModelAccess().getPatternsAssignment(), "rule__Model__PatternsAssignment");
					put(grammarAccess.getPatternAccess().getNameAssignment_1(), "rule__Pattern__NameAssignment_1");
					put(grammarAccess.getPatternAccess().getEventAssignment_4(), "rule__Pattern__EventAssignment_4");
					put(grammarAccess.getPatternAccess().getSelectEntriesAssignment_6(), "rule__Pattern__SelectEntriesAssignment_6");
					put(grammarAccess.getPatternAccess().getSelectEntryAssignment_7(), "rule__Pattern__SelectEntryAssignment_7");
					put(grammarAccess.getNonLastSelectEntryAccess().getEntryAssignment_0(), "rule__NonLastSelectEntry__EntryAssignment_0");
					put(grammarAccess.getLastSelectEntryAccess().getEntryAssignment(), "rule__LastSelectEntry__EntryAssignment");
					put(grammarAccess.getSelectEntryAccess().getFieldAssignment_0_0(), "rule__SelectEntry__FieldAssignment_0_0");
					put(grammarAccess.getSelectEntryAccess().getAliasAssignment_0_1_1(), "rule__SelectEntry__AliasAssignment_0_1_1");
					put(grammarAccess.getSelectEntryAccess().getGroupOpAssignment_1_0(), "rule__SelectEntry__GroupOpAssignment_1_0");
					put(grammarAccess.getSelectEntryAccess().getFieldAssignment_1_2(), "rule__SelectEntry__FieldAssignment_1_2");
					put(grammarAccess.getSelectEntryAccess().getAliasAssignment_1_4_1(), "rule__SelectEntry__AliasAssignment_1_4_1");
					put(grammarAccess.getFieldAccess().getNameAssignment_1_1(), "rule__Field__NameAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalEsper2MaudeParser typedParser = (InternalEsper2MaudeParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Esper2MaudeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Esper2MaudeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
