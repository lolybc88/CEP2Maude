/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.esper2Maude.Model;

@SuppressWarnings("all")
public class Esper2MaudeGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Model model = ((Model) _head);
    CharSequence _compile = this.compile(model);
    fsa.generateFile(("code" + ".maude"), _compile);
  }
  
  public CharSequence compile(final Model e) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = e.toString();
    _builder.append(_string, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
