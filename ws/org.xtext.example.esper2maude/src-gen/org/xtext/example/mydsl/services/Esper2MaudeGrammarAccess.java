/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Esper2MaudeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper2Maude.Model");
		private final Assignment cPatternsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatternsPatternParserRuleCall_0 = (RuleCall)cPatternsAssignment.eContents().get(0);
		
		//Model:
		//	patterns+=Pattern*;
		@Override public ParserRule getRule() { return rule; }
		
		//patterns+=Pattern*
		public Assignment getPatternsAssignment() { return cPatternsAssignment; }
		
		//Pattern
		public RuleCall getPatternsPatternParserRuleCall_0() { return cPatternsPatternParserRuleCall_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper2Maude.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInsertIntoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventIDTerminalRuleCall_4_0 = (RuleCall)cEventAssignment_4.eContents().get(0);
		private final Keyword cSelectKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSelectEntriesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSelectEntriesNonLastSelectEntryParserRuleCall_6_0 = (RuleCall)cSelectEntriesAssignment_6.eContents().get(0);
		private final Assignment cSelectEntryAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSelectEntryLastSelectEntryParserRuleCall_7_0 = (RuleCall)cSelectEntryAssignment_7.eContents().get(0);
		private final Keyword cFromKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cGroupByKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Pattern:
		//	'@Name(' name=STRING ')'
		//	'insert into' event=ID
		//	'select' selectEntries+=NonLastSelectEntry* selectEntry=LastSelectEntry
		//	'from'
		//	'group by'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'@Name(' name=STRING ')' 'insert into' event=ID 'select' selectEntries+=NonLastSelectEntry* selectEntry=LastSelectEntry
		//'from' 'group by'?
		public Group getGroup() { return cGroup; }
		
		//'@Name('
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'insert into'
		public Keyword getInsertIntoKeyword_3() { return cInsertIntoKeyword_3; }
		
		//event=ID
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }
		
		//ID
		public RuleCall getEventIDTerminalRuleCall_4_0() { return cEventIDTerminalRuleCall_4_0; }
		
		//'select'
		public Keyword getSelectKeyword_5() { return cSelectKeyword_5; }
		
		//selectEntries+=NonLastSelectEntry*
		public Assignment getSelectEntriesAssignment_6() { return cSelectEntriesAssignment_6; }
		
		//NonLastSelectEntry
		public RuleCall getSelectEntriesNonLastSelectEntryParserRuleCall_6_0() { return cSelectEntriesNonLastSelectEntryParserRuleCall_6_0; }
		
		//selectEntry=LastSelectEntry
		public Assignment getSelectEntryAssignment_7() { return cSelectEntryAssignment_7; }
		
		//LastSelectEntry
		public RuleCall getSelectEntryLastSelectEntryParserRuleCall_7_0() { return cSelectEntryLastSelectEntryParserRuleCall_7_0; }
		
		//'from'
		public Keyword getFromKeyword_8() { return cFromKeyword_8; }
		
		//'group by'?
		public Keyword getGroupByKeyword_9() { return cGroupByKeyword_9; }
	}
	public class NonLastSelectEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper2Maude.NonLastSelectEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntrySelectEntryParserRuleCall_0_0 = (RuleCall)cEntryAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NonLastSelectEntry:
		//	entry=SelectEntry ',';
		@Override public ParserRule getRule() { return rule; }
		
		//entry=SelectEntry ','
		public Group getGroup() { return cGroup; }
		
		//entry=SelectEntry
		public Assignment getEntryAssignment_0() { return cEntryAssignment_0; }
		
		//SelectEntry
		public RuleCall getEntrySelectEntryParserRuleCall_0_0() { return cEntrySelectEntryParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}
	public class LastSelectEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper2Maude.LastSelectEntry");
		private final Assignment cEntryAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntrySelectEntryParserRuleCall_0 = (RuleCall)cEntryAssignment.eContents().get(0);
		
		//LastSelectEntry:
		//	entry=SelectEntry;
		@Override public ParserRule getRule() { return rule; }
		
		//entry=SelectEntry
		public Assignment getEntryAssignment() { return cEntryAssignment; }
		
		//SelectEntry
		public RuleCall getEntrySelectEntryParserRuleCall_0() { return cEntrySelectEntryParserRuleCall_0; }
	}
	public class SelectEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper2Maude.SelectEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFieldAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFieldFieldParserRuleCall_0_0_0 = (RuleCall)cFieldAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAsKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cAliasAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_0_1_1_0 = (RuleCall)cAliasAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cGroupOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGroupOpGroupOpParserRuleCall_1_0_0 = (RuleCall)cGroupOpAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFieldAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFieldFieldParserRuleCall_1_2_0 = (RuleCall)cFieldAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cAsKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cAliasAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_4_1_0 = (RuleCall)cAliasAssignment_1_4_1.eContents().get(0);
		
		//SelectEntry:
		//	field=Field ('as' alias=ID)? | groupOp=GroupOp '(' field=Field ')' ('as' alias=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//field=Field ('as' alias=ID)? | groupOp=GroupOp '(' field=Field ')' ('as' alias=ID)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//field=Field ('as' alias=ID)?
		public Group getGroup_0() { return cGroup_0; }
		
		//field=Field
		public Assignment getFieldAssignment_0_0() { return cFieldAssignment_0_0; }
		
		//Field
		public RuleCall getFieldFieldParserRuleCall_0_0_0() { return cFieldFieldParserRuleCall_0_0_0; }
		
		//('as' alias=ID)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'as'
		public Keyword getAsKeyword_0_1_0() { return cAsKeyword_0_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_0_1_1() { return cAliasAssignment_0_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_0_1_1_0() { return cAliasIDTerminalRuleCall_0_1_1_0; }
		
		//groupOp=GroupOp '(' field=Field ')' ('as' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//groupOp=GroupOp
		public Assignment getGroupOpAssignment_1_0() { return cGroupOpAssignment_1_0; }
		
		//GroupOp
		public RuleCall getGroupOpGroupOpParserRuleCall_1_0_0() { return cGroupOpGroupOpParserRuleCall_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//field=Field
		public Assignment getFieldAssignment_1_2() { return cFieldAssignment_1_2; }
		
		//Field
		public RuleCall getFieldFieldParserRuleCall_1_2_0() { return cFieldFieldParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//('as' alias=ID)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'as'
		public Keyword getAsKeyword_1_4_0() { return cAsKeyword_1_4_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_4_1() { return cAliasAssignment_1_4_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_4_1_0() { return cAliasIDTerminalRuleCall_1_4_1_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper2Maude.Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//Field:
		//	'*' |
		//	'e.' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | 'e.' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'e.' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'e.'
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}
	public class GroupOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper2Maude.GroupOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMaxKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMinKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//GroupOp:
		//	'count' |
		//	'max' |
		//	'min';
		@Override public ParserRule getRule() { return rule; }
		
		//'count' | 'max' | 'min'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'count'
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }
		
		//'max'
		public Keyword getMaxKeyword_1() { return cMaxKeyword_1; }
		
		//'min'
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final PatternElements pPattern;
	private final NonLastSelectEntryElements pNonLastSelectEntry;
	private final LastSelectEntryElements pLastSelectEntry;
	private final SelectEntryElements pSelectEntry;
	private final FieldElements pField;
	private final GroupOpElements pGroupOp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Esper2MaudeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPattern = new PatternElements();
		this.pNonLastSelectEntry = new NonLastSelectEntryElements();
		this.pLastSelectEntry = new LastSelectEntryElements();
		this.pSelectEntry = new SelectEntryElements();
		this.pField = new FieldElements();
		this.pGroupOp = new GroupOpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Esper2Maude".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	patterns+=Pattern*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Pattern:
	//	'@Name(' name=STRING ')'
	//	'insert into' event=ID
	//	'select' selectEntries+=NonLastSelectEntry* selectEntry=LastSelectEntry
	//	'from'
	//	'group by'?;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//NonLastSelectEntry:
	//	entry=SelectEntry ',';
	public NonLastSelectEntryElements getNonLastSelectEntryAccess() {
		return pNonLastSelectEntry;
	}
	
	public ParserRule getNonLastSelectEntryRule() {
		return getNonLastSelectEntryAccess().getRule();
	}
	
	//LastSelectEntry:
	//	entry=SelectEntry;
	public LastSelectEntryElements getLastSelectEntryAccess() {
		return pLastSelectEntry;
	}
	
	public ParserRule getLastSelectEntryRule() {
		return getLastSelectEntryAccess().getRule();
	}
	
	//SelectEntry:
	//	field=Field ('as' alias=ID)? | groupOp=GroupOp '(' field=Field ')' ('as' alias=ID)?;
	public SelectEntryElements getSelectEntryAccess() {
		return pSelectEntry;
	}
	
	public ParserRule getSelectEntryRule() {
		return getSelectEntryAccess().getRule();
	}
	
	//Field:
	//	'*' |
	//	'e.' name=ID;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//GroupOp:
	//	'count' |
	//	'max' |
	//	'min';
	public GroupOpElements getGroupOpAccess() {
		return pGroupOp;
	}
	
	public ParserRule getGroupOpRule() {
		return getGroupOpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
