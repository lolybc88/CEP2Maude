/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.esper2Maude.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.esper2Maude.Esper2MaudePackage;
import org.xtext.example.mydsl.esper2Maude.LastSelectEntry;
import org.xtext.example.mydsl.esper2Maude.NonLastSelectEntry;
import org.xtext.example.mydsl.esper2Maude.Pattern;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pattern</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.PatternImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.PatternImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.PatternImpl#getSelectEntries <em>Select Entries</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.PatternImpl#getSelectEntry <em>Select Entry</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PatternImpl extends MinimalEObjectImpl.Container implements Pattern
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected static final String EVENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected String event = EVENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getSelectEntries() <em>Select Entries</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectEntries()
   * @generated
   * @ordered
   */
  protected EList<NonLastSelectEntry> selectEntries;

  /**
   * The cached value of the '{@link #getSelectEntry() <em>Select Entry</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectEntry()
   * @generated
   * @ordered
   */
  protected LastSelectEntry selectEntry;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PatternImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Esper2MaudePackage.Literals.PATTERN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.PATTERN__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEvent(String newEvent)
  {
    String oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.PATTERN__EVENT, oldEvent, event));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NonLastSelectEntry> getSelectEntries()
  {
    if (selectEntries == null)
    {
      selectEntries = new EObjectContainmentEList<NonLastSelectEntry>(NonLastSelectEntry.class, this, Esper2MaudePackage.PATTERN__SELECT_ENTRIES);
    }
    return selectEntries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LastSelectEntry getSelectEntry()
  {
    return selectEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectEntry(LastSelectEntry newSelectEntry, NotificationChain msgs)
  {
    LastSelectEntry oldSelectEntry = selectEntry;
    selectEntry = newSelectEntry;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.PATTERN__SELECT_ENTRY, oldSelectEntry, newSelectEntry);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSelectEntry(LastSelectEntry newSelectEntry)
  {
    if (newSelectEntry != selectEntry)
    {
      NotificationChain msgs = null;
      if (selectEntry != null)
        msgs = ((InternalEObject)selectEntry).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.PATTERN__SELECT_ENTRY, null, msgs);
      if (newSelectEntry != null)
        msgs = ((InternalEObject)newSelectEntry).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.PATTERN__SELECT_ENTRY, null, msgs);
      msgs = basicSetSelectEntry(newSelectEntry, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.PATTERN__SELECT_ENTRY, newSelectEntry, newSelectEntry));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.PATTERN__SELECT_ENTRIES:
        return ((InternalEList<?>)getSelectEntries()).basicRemove(otherEnd, msgs);
      case Esper2MaudePackage.PATTERN__SELECT_ENTRY:
        return basicSetSelectEntry(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.PATTERN__NAME:
        return getName();
      case Esper2MaudePackage.PATTERN__EVENT:
        return getEvent();
      case Esper2MaudePackage.PATTERN__SELECT_ENTRIES:
        return getSelectEntries();
      case Esper2MaudePackage.PATTERN__SELECT_ENTRY:
        return getSelectEntry();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.PATTERN__NAME:
        setName((String)newValue);
        return;
      case Esper2MaudePackage.PATTERN__EVENT:
        setEvent((String)newValue);
        return;
      case Esper2MaudePackage.PATTERN__SELECT_ENTRIES:
        getSelectEntries().clear();
        getSelectEntries().addAll((Collection<? extends NonLastSelectEntry>)newValue);
        return;
      case Esper2MaudePackage.PATTERN__SELECT_ENTRY:
        setSelectEntry((LastSelectEntry)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.PATTERN__NAME:
        setName(NAME_EDEFAULT);
        return;
      case Esper2MaudePackage.PATTERN__EVENT:
        setEvent(EVENT_EDEFAULT);
        return;
      case Esper2MaudePackage.PATTERN__SELECT_ENTRIES:
        getSelectEntries().clear();
        return;
      case Esper2MaudePackage.PATTERN__SELECT_ENTRY:
        setSelectEntry((LastSelectEntry)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.PATTERN__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Esper2MaudePackage.PATTERN__EVENT:
        return EVENT_EDEFAULT == null ? event != null : !EVENT_EDEFAULT.equals(event);
      case Esper2MaudePackage.PATTERN__SELECT_ENTRIES:
        return selectEntries != null && !selectEntries.isEmpty();
      case Esper2MaudePackage.PATTERN__SELECT_ENTRY:
        return selectEntry != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", event: ");
    result.append(event);
    result.append(')');
    return result.toString();
  }

} //PatternImpl
