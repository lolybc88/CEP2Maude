/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.esper2Maude.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.esper2Maude.Esper2MaudePackage;
import org.xtext.example.mydsl.esper2Maude.Window;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Window</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.WindowImpl#getTypeTime <em>Type Time</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.WindowImpl#getNum <em>Num</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.WindowImpl#getTypeBatch <em>Type Batch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WindowImpl extends MinimalEObjectImpl.Container implements Window
{
  /**
   * The default value of the '{@link #getTypeTime() <em>Type Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeTime()
   * @generated
   * @ordered
   */
  protected static final String TYPE_TIME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeTime() <em>Type Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeTime()
   * @generated
   * @ordered
   */
  protected String typeTime = TYPE_TIME_EDEFAULT;

  /**
   * The default value of the '{@link #getNum() <em>Num</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNum()
   * @generated
   * @ordered
   */
  protected static final int NUM_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNum() <em>Num</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNum()
   * @generated
   * @ordered
   */
  protected int num = NUM_EDEFAULT;

  /**
   * The default value of the '{@link #getTypeBatch() <em>Type Batch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeBatch()
   * @generated
   * @ordered
   */
  protected static final String TYPE_BATCH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeBatch() <em>Type Batch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeBatch()
   * @generated
   * @ordered
   */
  protected String typeBatch = TYPE_BATCH_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WindowImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Esper2MaudePackage.Literals.WINDOW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTypeTime()
  {
    return typeTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeTime(String newTypeTime)
  {
    String oldTypeTime = typeTime;
    typeTime = newTypeTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.WINDOW__TYPE_TIME, oldTypeTime, typeTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getNum()
  {
    return num;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNum(int newNum)
  {
    int oldNum = num;
    num = newNum;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.WINDOW__NUM, oldNum, num));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTypeBatch()
  {
    return typeBatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeBatch(String newTypeBatch)
  {
    String oldTypeBatch = typeBatch;
    typeBatch = newTypeBatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.WINDOW__TYPE_BATCH, oldTypeBatch, typeBatch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.WINDOW__TYPE_TIME:
        return getTypeTime();
      case Esper2MaudePackage.WINDOW__NUM:
        return getNum();
      case Esper2MaudePackage.WINDOW__TYPE_BATCH:
        return getTypeBatch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.WINDOW__TYPE_TIME:
        setTypeTime((String)newValue);
        return;
      case Esper2MaudePackage.WINDOW__NUM:
        setNum((Integer)newValue);
        return;
      case Esper2MaudePackage.WINDOW__TYPE_BATCH:
        setTypeBatch((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.WINDOW__TYPE_TIME:
        setTypeTime(TYPE_TIME_EDEFAULT);
        return;
      case Esper2MaudePackage.WINDOW__NUM:
        setNum(NUM_EDEFAULT);
        return;
      case Esper2MaudePackage.WINDOW__TYPE_BATCH:
        setTypeBatch(TYPE_BATCH_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.WINDOW__TYPE_TIME:
        return TYPE_TIME_EDEFAULT == null ? typeTime != null : !TYPE_TIME_EDEFAULT.equals(typeTime);
      case Esper2MaudePackage.WINDOW__NUM:
        return num != NUM_EDEFAULT;
      case Esper2MaudePackage.WINDOW__TYPE_BATCH:
        return TYPE_BATCH_EDEFAULT == null ? typeBatch != null : !TYPE_BATCH_EDEFAULT.equals(typeBatch);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (typeTime: ");
    result.append(typeTime);
    result.append(", num: ");
    result.append(num);
    result.append(", typeBatch: ");
    result.append(typeBatch);
    result.append(')');
    return result.toString();
  }

} //WindowImpl
