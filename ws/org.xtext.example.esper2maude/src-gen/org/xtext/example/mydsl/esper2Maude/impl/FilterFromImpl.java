/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.esper2Maude.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.esper2Maude.Esper2MaudePackage;
import org.xtext.example.mydsl.esper2Maude.FilterEvent;
import org.xtext.example.mydsl.esper2Maude.FilterFrom;
import org.xtext.example.mydsl.esper2Maude.FollowedBy;
import org.xtext.example.mydsl.esper2Maude.LogicalOperator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Filter From</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.FilterFromImpl#getFollowedBy <em>Followed By</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.FilterFromImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.FilterFromImpl#getOp <em>Op</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.FilterFromImpl#getRight <em>Right</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.FilterFromImpl#getEventVariable <em>Event Variable</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.FilterFromImpl#getEventName <em>Event Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper2Maude.impl.FilterFromImpl#getFilter <em>Filter</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FilterFromImpl extends MinimalEObjectImpl.Container implements FilterFrom
{
  /**
   * The cached value of the '{@link #getFollowedBy() <em>Followed By</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFollowedBy()
   * @generated
   * @ordered
   */
  protected FollowedBy followedBy;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected FilterFrom left;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected LogicalOperator op;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected FilterFrom right;

  /**
   * The default value of the '{@link #getEventVariable() <em>Event Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventVariable()
   * @generated
   * @ordered
   */
  protected static final String EVENT_VARIABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEventVariable() <em>Event Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventVariable()
   * @generated
   * @ordered
   */
  protected String eventVariable = EVENT_VARIABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getEventName() <em>Event Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventName()
   * @generated
   * @ordered
   */
  protected static final String EVENT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEventName() <em>Event Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventName()
   * @generated
   * @ordered
   */
  protected String eventName = EVENT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getFilter() <em>Filter</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilter()
   * @generated
   * @ordered
   */
  protected FilterEvent filter;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FilterFromImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Esper2MaudePackage.Literals.FILTER_FROM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FollowedBy getFollowedBy()
  {
    return followedBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFollowedBy(FollowedBy newFollowedBy, NotificationChain msgs)
  {
    FollowedBy oldFollowedBy = followedBy;
    followedBy = newFollowedBy;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY, oldFollowedBy, newFollowedBy);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFollowedBy(FollowedBy newFollowedBy)
  {
    if (newFollowedBy != followedBy)
    {
      NotificationChain msgs = null;
      if (followedBy != null)
        msgs = ((InternalEObject)followedBy).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY, null, msgs);
      if (newFollowedBy != null)
        msgs = ((InternalEObject)newFollowedBy).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY, null, msgs);
      msgs = basicSetFollowedBy(newFollowedBy, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY, newFollowedBy, newFollowedBy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FilterFrom getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(FilterFrom newLeft, NotificationChain msgs)
  {
    FilterFrom oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(FilterFrom newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalOperator getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOp(LogicalOperator newOp, NotificationChain msgs)
  {
    LogicalOperator oldOp = op;
    op = newOp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__OP, oldOp, newOp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOp(LogicalOperator newOp)
  {
    if (newOp != op)
    {
      NotificationChain msgs = null;
      if (op != null)
        msgs = ((InternalEObject)op).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__OP, null, msgs);
      if (newOp != null)
        msgs = ((InternalEObject)newOp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__OP, null, msgs);
      msgs = basicSetOp(newOp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__OP, newOp, newOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FilterFrom getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(FilterFrom newRight, NotificationChain msgs)
  {
    FilterFrom oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(FilterFrom newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEventVariable()
  {
    return eventVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEventVariable(String newEventVariable)
  {
    String oldEventVariable = eventVariable;
    eventVariable = newEventVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__EVENT_VARIABLE, oldEventVariable, eventVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEventName()
  {
    return eventName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEventName(String newEventName)
  {
    String oldEventName = eventName;
    eventName = newEventName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__EVENT_NAME, oldEventName, eventName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FilterEvent getFilter()
  {
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFilter(FilterEvent newFilter, NotificationChain msgs)
  {
    FilterEvent oldFilter = filter;
    filter = newFilter;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__FILTER, oldFilter, newFilter);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFilter(FilterEvent newFilter)
  {
    if (newFilter != filter)
    {
      NotificationChain msgs = null;
      if (filter != null)
        msgs = ((InternalEObject)filter).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__FILTER, null, msgs);
      if (newFilter != null)
        msgs = ((InternalEObject)newFilter).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Esper2MaudePackage.FILTER_FROM__FILTER, null, msgs);
      msgs = basicSetFilter(newFilter, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Esper2MaudePackage.FILTER_FROM__FILTER, newFilter, newFilter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY:
        return basicSetFollowedBy(null, msgs);
      case Esper2MaudePackage.FILTER_FROM__LEFT:
        return basicSetLeft(null, msgs);
      case Esper2MaudePackage.FILTER_FROM__OP:
        return basicSetOp(null, msgs);
      case Esper2MaudePackage.FILTER_FROM__RIGHT:
        return basicSetRight(null, msgs);
      case Esper2MaudePackage.FILTER_FROM__FILTER:
        return basicSetFilter(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY:
        return getFollowedBy();
      case Esper2MaudePackage.FILTER_FROM__LEFT:
        return getLeft();
      case Esper2MaudePackage.FILTER_FROM__OP:
        return getOp();
      case Esper2MaudePackage.FILTER_FROM__RIGHT:
        return getRight();
      case Esper2MaudePackage.FILTER_FROM__EVENT_VARIABLE:
        return getEventVariable();
      case Esper2MaudePackage.FILTER_FROM__EVENT_NAME:
        return getEventName();
      case Esper2MaudePackage.FILTER_FROM__FILTER:
        return getFilter();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY:
        setFollowedBy((FollowedBy)newValue);
        return;
      case Esper2MaudePackage.FILTER_FROM__LEFT:
        setLeft((FilterFrom)newValue);
        return;
      case Esper2MaudePackage.FILTER_FROM__OP:
        setOp((LogicalOperator)newValue);
        return;
      case Esper2MaudePackage.FILTER_FROM__RIGHT:
        setRight((FilterFrom)newValue);
        return;
      case Esper2MaudePackage.FILTER_FROM__EVENT_VARIABLE:
        setEventVariable((String)newValue);
        return;
      case Esper2MaudePackage.FILTER_FROM__EVENT_NAME:
        setEventName((String)newValue);
        return;
      case Esper2MaudePackage.FILTER_FROM__FILTER:
        setFilter((FilterEvent)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY:
        setFollowedBy((FollowedBy)null);
        return;
      case Esper2MaudePackage.FILTER_FROM__LEFT:
        setLeft((FilterFrom)null);
        return;
      case Esper2MaudePackage.FILTER_FROM__OP:
        setOp((LogicalOperator)null);
        return;
      case Esper2MaudePackage.FILTER_FROM__RIGHT:
        setRight((FilterFrom)null);
        return;
      case Esper2MaudePackage.FILTER_FROM__EVENT_VARIABLE:
        setEventVariable(EVENT_VARIABLE_EDEFAULT);
        return;
      case Esper2MaudePackage.FILTER_FROM__EVENT_NAME:
        setEventName(EVENT_NAME_EDEFAULT);
        return;
      case Esper2MaudePackage.FILTER_FROM__FILTER:
        setFilter((FilterEvent)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Esper2MaudePackage.FILTER_FROM__FOLLOWED_BY:
        return followedBy != null;
      case Esper2MaudePackage.FILTER_FROM__LEFT:
        return left != null;
      case Esper2MaudePackage.FILTER_FROM__OP:
        return op != null;
      case Esper2MaudePackage.FILTER_FROM__RIGHT:
        return right != null;
      case Esper2MaudePackage.FILTER_FROM__EVENT_VARIABLE:
        return EVENT_VARIABLE_EDEFAULT == null ? eventVariable != null : !EVENT_VARIABLE_EDEFAULT.equals(eventVariable);
      case Esper2MaudePackage.FILTER_FROM__EVENT_NAME:
        return EVENT_NAME_EDEFAULT == null ? eventName != null : !EVENT_NAME_EDEFAULT.equals(eventName);
      case Esper2MaudePackage.FILTER_FROM__FILTER:
        return filter != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (eventVariable: ");
    result.append(eventVariable);
    result.append(", eventName: ");
    result.append(eventName);
    result.append(')');
    return result.toString();
  }

} //FilterFromImpl
