/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.esper2Maude.Esper2MaudePackage;
import org.xtext.example.mydsl.esper2Maude.Field;
import org.xtext.example.mydsl.esper2Maude.LastSelectEntry;
import org.xtext.example.mydsl.esper2Maude.Model;
import org.xtext.example.mydsl.esper2Maude.NonLastSelectEntry;
import org.xtext.example.mydsl.esper2Maude.Pattern;
import org.xtext.example.mydsl.esper2Maude.SelectEntry;
import org.xtext.example.mydsl.services.Esper2MaudeGrammarAccess;

@SuppressWarnings("all")
public class Esper2MaudeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Esper2MaudeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Esper2MaudePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Esper2MaudePackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case Esper2MaudePackage.LAST_SELECT_ENTRY:
				sequence_LastSelectEntry(context, (LastSelectEntry) semanticObject); 
				return; 
			case Esper2MaudePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Esper2MaudePackage.NON_LAST_SELECT_ENTRY:
				sequence_NonLastSelectEntry(context, (NonLastSelectEntry) semanticObject); 
				return; 
			case Esper2MaudePackage.PATTERN:
				sequence_Pattern(context, (Pattern) semanticObject); 
				return; 
			case Esper2MaudePackage.SELECT_ENTRY:
				sequence_SelectEntry(context, (SelectEntry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Esper2MaudePackage.Literals.FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Esper2MaudePackage.Literals.FIELD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LastSelectEntry returns LastSelectEntry
	 *
	 * Constraint:
	 *     entry=SelectEntry
	 */
	protected void sequence_LastSelectEntry(ISerializationContext context, LastSelectEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Esper2MaudePackage.Literals.LAST_SELECT_ENTRY__ENTRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Esper2MaudePackage.Literals.LAST_SELECT_ENTRY__ENTRY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLastSelectEntryAccess().getEntrySelectEntryParserRuleCall_0(), semanticObject.getEntry());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     patterns+=Pattern+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NonLastSelectEntry returns NonLastSelectEntry
	 *
	 * Constraint:
	 *     entry=SelectEntry
	 */
	protected void sequence_NonLastSelectEntry(ISerializationContext context, NonLastSelectEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Esper2MaudePackage.Literals.NON_LAST_SELECT_ENTRY__ENTRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Esper2MaudePackage.Literals.NON_LAST_SELECT_ENTRY__ENTRY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNonLastSelectEntryAccess().getEntrySelectEntryParserRuleCall_0_0(), semanticObject.getEntry());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pattern returns Pattern
	 *
	 * Constraint:
	 *     (name=STRING event=ID selectEntries+=NonLastSelectEntry* selectEntry=LastSelectEntry)
	 */
	protected void sequence_Pattern(ISerializationContext context, Pattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelectEntry returns SelectEntry
	 *
	 * Constraint:
	 *     ((field=Field alias=ID?) | (groupOp=GroupOp field=Field alias=ID?))
	 */
	protected void sequence_SelectEntry(ISerializationContext context, SelectEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
